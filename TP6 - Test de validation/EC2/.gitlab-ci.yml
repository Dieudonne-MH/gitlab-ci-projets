variables:
  AMI_ID: "ami-0866a3c8686eaeeba"
  KEY_NAME: "deploy"
  SECURITY_GROUP: "sg-0597fb981e1b76064"
  INSTANCE_TYPE: "t2.medium"
  STORAGE: 100


image: docker:latest
services:
  - name: docker:dind
    alias: docker


stages:
  - build
  - Test acceptation
  - Release image
  - Deploy review
  - Stop review
  - Deploy staging
  - Test staging  
  - Deploy prod
  - Test prod


.test_template: &test
  image: alpine
  only:
    - master
  script:
    - apk --no-cache add curl
    - curl "http://$DOMAIN" | grep "Hello world!"  


docker-build:
  # Use the official docker image.
  stage: build
  script:
    - docker build -t  alpinehelloworld .
    - docker save alpinehelloworld > alpinehelloworld.tar
  artifacts:
    paths:
      - alpinehelloworld.tar    


test acceptation:
  # Official docker image.
  stage: Test acceptation
  script:
    - docker load < alpinehelloworld.tar
    - docker run -d -p 80:5000 -e PORT=5000 --name webapp alpinehelloworld
    - sleep 5
    - apk --no-cache add curl
    - curl "http://docker" | grep  "Hello world!"


release image:
  stage: Release image
  script:
    - docker load < alpinehelloworld.tar
    - docker tag alpinehelloworld "${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}"
    - docker tag alpinehelloworld "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push "${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}"
    - docker push "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"

  
deploy staging: 
  stage: Deploy staging
  environment:
    name: staging
    url: http://${HOSTNAME_DEPLOY_STAGING}
  only:
   - master
  script:
    - apk add openssh-client
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod -R 400 ~/.ssh
    - touch ~/.ssh/known_hosts
    - cd ~/.ssh
    - echo "${SSH_KEY}" > id_rsa
    - chmod 0400 id_rsa
    - ssh-keyscan -t rsa  ${HOSTNAME_DEPLOY_STAGING} >> ~/.ssh/known_hosts
    - command1="docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - command2="docker pull $IMAGE_NAME:$CI_COMMIT_REF_SLUG"
    - command3="docker rm -f webapp"
    - command4="docker run -d -p 80:5000 -e PORT=5000 --name webapp $IMAGE_NAME:$CI_COMMIT_REF_SLUG"
    - ssh -t ${SSH_USER}@${HOSTNAME_DEPLOY_STAGING} 
      -o SendEnv=IMAGE_NAME 
      -o SendEnv=CI_COMMIT_REF_SLUG 
      -o SendEnv=CI_REGISTRY_USER 
      -o SendEnv=CI_REGISTRY_PASSWORD 
      -o SendEnv=CI_REGISTRY 
      -C "$command1 && $command2 && $command3 && $command4"


deploy prod: 
  stage: Deploy prod

  environment:
    name: prod
    url: http://${HOSTNAME_DEPLOY_PROD}
  only:
   - master
  script:
    - apk add openssh-client
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod -R 400 ~/.ssh
    - touch ~/.ssh/known_hosts
    - cd ~/.ssh
    - echo "${SSH_KEY}" > id_rsa
    - chmod 0400 id_rsa
    - ssh-keyscan -t rsa  ${HOSTNAME_DEPLOY_PROD} >> ~/.ssh/known_hosts
    - command1="docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - command2="docker pull $IMAGE_NAME:$CI_COMMIT_REF_SLUG"
    - command3="docker rm -f webapp"
    - command4="docker run -d -p 80:5000 -e PORT=5000 --name webapp $IMAGE_NAME:$CI_COMMIT_REF_SLUG"
    - ssh -t ${SSH_USER}@${HOSTNAME_DEPLOY_PROD} 
      -o SendEnv=IMAGE_NAME 
      -o SendEnv=CI_COMMIT_REF_SLUG 
      -o SendEnv=CI_REGISTRY_USER 
      -o SendEnv=CI_REGISTRY_PASSWORD 
      -o SendEnv=CI_REGISTRY 
      -C "$command1 && $command2 && $command3 && $command4"


deploy review:
  stage: Deploy review
  only:
    - merge_requests
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: $REVIEW_ENVIRONMENT_URL
    on_stop: stop review
  script:
    - export INIT_PATH=$(pwd)
    - apk add --no-cache python3 py3-pip
    - python3 -m venv venv  # Créer un environnement virtuel
    - source venv/bin/activate  # Activer l'environnement virtuel
    - pip install awscli  # Installer awscli dans l'environnement virtuel

    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION

    - export BRANCH_NAME=$CI_COMMIT_REF_SLUG
    - export TAG="review-$BRANCH_NAME"

    - |
      INSTANCE_ID=$(aws ec2 describe-instances \
        --filters "Name=tag:Name,Values=$TAG" \
        --query "Reservations[*].Instances[*].InstanceId" \
        --output text)

    - |
      if [ -n "$INSTANCE_ID" ]; then
        echo "Une instance avec le tag '$TAG' existe déjà : $INSTANCE_ID"
      else
        USER_DATA="#!/bin/bash
        curl -fsSL https://get.docker.com -o install-docker.sh
        sh install-docker.sh --dry-run
        sudo sh install-docker.sh
        sudo usermod -aG docker ubuntu"

        aws ec2 run-instances \
          --image-id $AMI_ID \
          --count 1 \
          --instance-type $INSTANCE_TYPE \
          --key-name $KEY_NAME \
          --security-group-ids $SECURITY_GROUP \
          --block-device-mappings DeviceName=/dev/sda1,Ebs={VolumeSize=$STORAGE} \
          --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value='$TAG'}]' \
          --user-data "$USER_DATA"

        sleep 30
        echo "Instance EC2 créée avec le tag '$TAG'."
      fi

    - |
      PUBLIC_IP=$(aws ec2 describe-instances \
        --filters "Name=tag:Name,Values=$TAG" \
        --query "Reservations[*].Instances[*].PublicIpAddress" \
        --output text)

    - |
      if [ -z "$PUBLIC_IP" ]; then
        echo "Aucune instance trouvée avec le tag '$TAG'."
        exit 1
      fi

    - export HOSTNAME_DEPLOY_REVIEW=$PUBLIC_IP
    - echo "IP publique de l'instance est $HOSTNAME_DEPLOY_REVIEW"

    - apk add openssh-client
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod -R 400 ~/.ssh
    - touch ~/.ssh/known_hosts
    - cd ~/.ssh
    - echo "${SSH_KEY}" > id_rsa
    - chmod 0400 id_rsa
    - ssh-keyscan -t rsa  ${HOSTNAME_DEPLOY_REVIEW} >> ~/.ssh/known_hosts
    - command1="docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - command2="docker pull $IMAGE_NAME:$CI_COMMIT_REF_SLUG"
    - command3="docker rm -f webapp"
    - command4="docker run -d -p 80:5000 -e PORT=5000 --name webapp $IMAGE_NAME:$CI_COMMIT_REF_SLUG"
    - ssh -t ${SSH_USER}@${HOSTNAME_DEPLOY_REVIEW} 
      -o SendEnv=IMAGE_NAME 
      -o SendEnv=CI_COMMIT_REF_SLUG 
      -o SendEnv=CI_REGISTRY_USER 
      -o SendEnv=CI_REGISTRY_PASSWORD 
      -o SendEnv=CI_REGISTRY 
      -C "$command1 && $command2 && $command3 && $command4"

    - cd $INIT_PATH
    - echo "REVIEW_ENVIRONMENT_URL=http://$HOSTNAME_DEPLOY_REVIEW" >> deploy.env
  artifacts:
    reports:
      dotenv: deploy.env 


stop review:
  stage: Stop review
  only:
    - merge_requests
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  when: manual
  script:
    - apk add --no-cache python3 py3-pip
    - python3 -m venv venv  # Créer un environnement virtuel
    - source venv/bin/activate  # Activer l'environnement virtuel
    - pip install awscli  # Installer awscli dans l'environnement virtuel

    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION

    - export BRANCH_NAME=$CI_COMMIT_REF_SLUG
    - export TAG="review-$BRANCH_NAME"
    - export NEW_TAG="destroyed-$BRANCH_NAME"

    - |
      INSTANCE_ID=$(aws ec2 describe-instances \
        --filters "Name=tag:Name,Values=$TAG" \
        --query "Reservations[*].Instances[*].InstanceId" \
        --output text)

    - |
      if [ -n "$INSTANCE_ID" ]; then
        echo "Suppression de l'instance avec le tag '$TAG': $INSTANCE_ID"

        # Mettre à jour le tag de l'instance
        aws ec2 create-tags --resources $INSTANCE_ID --tags Key=Name,Value=$NEW_TAG
        echo "Tag de l'instance mis à jour en '$NEW_TAG'."

        echo "Suppression de l'instance avec le tag '$NEW_TAG': $INSTANCE_ID"
        aws ec2 terminate-instances --instance-ids $INSTANCE_ID
        echo "Instance EC2 supprimée avec le tag '$NEW_TAG'."
      else
        echo "Aucune instance avec le tag '$TAG' à supprimer."
      fi


test staging:
  <<: *test
  stage: Test staging
  variables:
    DOMAIN: ${HOSTNAME_DEPLOY_STAGING}


test prod:
  <<: *test
  stage: Test prod
  variables:
    DOMAIN: ${HOSTNAME_DEPLOY_PROD}
